// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/artnikel/blogapi/internal/model"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// AddRefreshToken provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) AddRefreshToken(ctx context.Context, user *model.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for AddRefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_AddRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRefreshToken'
type MockUserRepository_AddRefreshToken_Call struct {
	*mock.Call
}

// AddRefreshToken is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) AddRefreshToken(ctx interface{}, user interface{}) *MockUserRepository_AddRefreshToken_Call {
	return &MockUserRepository_AddRefreshToken_Call{Call: _e.mock.On("AddRefreshToken", ctx, user)}
}

func (_c *MockUserRepository_AddRefreshToken_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserRepository_AddRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockUserRepository_AddRefreshToken_Call) Return(err error) *MockUserRepository_AddRefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_AddRefreshToken_Call) RunAndReturn(run func(ctx context.Context, user *model.User) error) *MockUserRepository_AddRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserByID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_DeleteUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByID'
type MockUserRepository_DeleteUserByID_Call struct {
	*mock.Call
}

// DeleteUserByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepository_Expecter) DeleteUserByID(ctx interface{}, id interface{}) *MockUserRepository_DeleteUserByID_Call {
	return &MockUserRepository_DeleteUserByID_Call{Call: _e.mock.On("DeleteUserByID", ctx, id)}
}

func (_c *MockUserRepository_DeleteUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUserRepository_DeleteUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_DeleteUserByID_Call) Return(err error) *MockUserRepository_DeleteUserByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_DeleteUserByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockUserRepository_DeleteUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataByUsername provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetDataByUsername(ctx context.Context, username string) (uuid.UUID, []byte, bool, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetDataByUsername")
	}

	var r0 uuid.UUID
	var r1 []byte
	var r2 bool
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, []byte, bool, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = returnFunc(ctx, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) bool); ok {
		r2 = returnFunc(ctx, username)
	} else {
		r2 = ret.Get(2).(bool)
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, string) error); ok {
		r3 = returnFunc(ctx, username)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockUserRepository_GetDataByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataByUsername'
type MockUserRepository_GetDataByUsername_Call struct {
	*mock.Call
}

// GetDataByUsername is a helper method to define mock.On call
//   - ctx
//   - username
func (_e *MockUserRepository_Expecter) GetDataByUsername(ctx interface{}, username interface{}) *MockUserRepository_GetDataByUsername_Call {
	return &MockUserRepository_GetDataByUsername_Call{Call: _e.mock.On("GetDataByUsername", ctx, username)}
}

func (_c *MockUserRepository_GetDataByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserRepository_GetDataByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetDataByUsername_Call) Return(uUID uuid.UUID, bytes []byte, b bool, err error) *MockUserRepository_GetDataByUsername_Call {
	_c.Call.Return(uUID, bytes, b, err)
	return _c
}

func (_c *MockUserRepository_GetDataByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (uuid.UUID, []byte, bool, error)) *MockUserRepository_GetDataByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshTokenByID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetRefreshTokenByID(ctx context.Context, id uuid.UUID) (string, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshTokenByID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (string, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetRefreshTokenByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshTokenByID'
type MockUserRepository_GetRefreshTokenByID_Call struct {
	*mock.Call
}

// GetRefreshTokenByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepository_Expecter) GetRefreshTokenByID(ctx interface{}, id interface{}) *MockUserRepository_GetRefreshTokenByID_Call {
	return &MockUserRepository_GetRefreshTokenByID_Call{Call: _e.mock.On("GetRefreshTokenByID", ctx, id)}
}

func (_c *MockUserRepository_GetRefreshTokenByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUserRepository_GetRefreshTokenByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_GetRefreshTokenByID_Call) Return(s string, err error) *MockUserRepository_GetRefreshTokenByID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserRepository_GetRefreshTokenByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (string, error)) *MockUserRepository_GetRefreshTokenByID_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) SignUp(ctx context.Context, user *model.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockUserRepository_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) SignUp(ctx interface{}, user interface{}) *MockUserRepository_SignUp_Call {
	return &MockUserRepository_SignUp_Call{Call: _e.mock.On("SignUp", ctx, user)}
}

func (_c *MockUserRepository_SignUp_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserRepository_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockUserRepository_SignUp_Call) Return(err error) *MockUserRepository_SignUp_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_SignUp_Call) RunAndReturn(run func(ctx context.Context, user *model.User) error) *MockUserRepository_SignUp_Call {
	_c.Call.Return(run)
	return _c
}
