// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/artnikel/blogapi/internal/model"
	"github.com/artnikel/blogapi/internal/service"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// DeleteUserByID provides a mock function for the type MockUserService
func (_mock *MockUserService) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_DeleteUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByID'
type MockUserService_DeleteUserByID_Call struct {
	*mock.Call
}

// DeleteUserByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) DeleteUserByID(ctx interface{}, id interface{}) *MockUserService_DeleteUserByID_Call {
	return &MockUserService_DeleteUserByID_Call{Call: _e.mock.On("DeleteUserByID", ctx, id)}
}

func (_c *MockUserService_DeleteUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUserService_DeleteUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserService_DeleteUserByID_Call) Return(err error) *MockUserService_DeleteUserByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_DeleteUserByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockUserService_DeleteUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockUserService
func (_mock *MockUserService) Login(ctx context.Context, user *model.User) (*service.TokenPair, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *service.TokenPair
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) (*service.TokenPair, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) *service.TokenPair); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TokenPair)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserService_Expecter) Login(ctx interface{}, user interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", ctx, user)}
}

func (_c *MockUserService_Login_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(tokenPair *service.TokenPair, err error) *MockUserService_Login_Call {
	_c.Call.Return(tokenPair, err)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(ctx context.Context, user *model.User) (*service.TokenPair, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function for the type MockUserService
func (_mock *MockUserService) Refresh(ctx context.Context, tokenPair service.TokenPair) (service.TokenPair, error) {
	ret := _mock.Called(ctx, tokenPair)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 service.TokenPair
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service.TokenPair) (service.TokenPair, error)); ok {
		return returnFunc(ctx, tokenPair)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, service.TokenPair) service.TokenPair); ok {
		r0 = returnFunc(ctx, tokenPair)
	} else {
		r0 = ret.Get(0).(service.TokenPair)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, service.TokenPair) error); ok {
		r1 = returnFunc(ctx, tokenPair)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockUserService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx
//   - tokenPair
func (_e *MockUserService_Expecter) Refresh(ctx interface{}, tokenPair interface{}) *MockUserService_Refresh_Call {
	return &MockUserService_Refresh_Call{Call: _e.mock.On("Refresh", ctx, tokenPair)}
}

func (_c *MockUserService_Refresh_Call) Run(run func(ctx context.Context, tokenPair service.TokenPair)) *MockUserService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.TokenPair))
	})
	return _c
}

func (_c *MockUserService_Refresh_Call) Return(tokenPair1 service.TokenPair, err error) *MockUserService_Refresh_Call {
	_c.Call.Return(tokenPair1, err)
	return _c
}

func (_c *MockUserService_Refresh_Call) RunAndReturn(run func(ctx context.Context, tokenPair service.TokenPair) (service.TokenPair, error)) *MockUserService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function for the type MockUserService
func (_mock *MockUserService) SignUp(ctx context.Context, user *model.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockUserService_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserService_Expecter) SignUp(ctx interface{}, user interface{}) *MockUserService_SignUp_Call {
	return &MockUserService_SignUp_Call{Call: _e.mock.On("SignUp", ctx, user)}
}

func (_c *MockUserService_SignUp_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserService_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockUserService_SignUp_Call) Return(err error) *MockUserService_SignUp_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_SignUp_Call) RunAndReturn(run func(ctx context.Context, user *model.User) error) *MockUserService_SignUp_Call {
	_c.Call.Return(run)
	return _c
}
