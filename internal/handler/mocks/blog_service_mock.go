// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/artnikel/blogapi/internal/model"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBlogService creates a new instance of MockBlogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlogService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlogService {
	mock := &MockBlogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlogService is an autogenerated mock type for the BlogService type
type MockBlogService struct {
	mock.Mock
}

type MockBlogService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlogService) EXPECT() *MockBlogService_Expecter {
	return &MockBlogService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockBlogService
func (_mock *MockBlogService) Create(ctx context.Context, blog *model.Blog) error {
	ret := _mock.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Blog) error); ok {
		r0 = returnFunc(ctx, blog)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlogService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBlogService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - blog
func (_e *MockBlogService_Expecter) Create(ctx interface{}, blog interface{}) *MockBlogService_Create_Call {
	return &MockBlogService_Create_Call{Call: _e.mock.On("Create", ctx, blog)}
}

func (_c *MockBlogService_Create_Call) Run(run func(ctx context.Context, blog *model.Blog)) *MockBlogService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Blog))
	})
	return _c
}

func (_c *MockBlogService_Create_Call) Return(err error) *MockBlogService_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlogService_Create_Call) RunAndReturn(run func(ctx context.Context, blog *model.Blog) error) *MockBlogService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockBlogService
func (_mock *MockBlogService) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlogService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBlogService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockBlogService_Expecter) Delete(ctx interface{}, id interface{}) *MockBlogService_Delete_Call {
	return &MockBlogService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockBlogService_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBlogService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBlogService_Delete_Call) Return(err error) *MockBlogService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlogService_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockBlogService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBlogsByUserID provides a mock function for the type MockBlogService
func (_mock *MockBlogService) DeleteBlogsByUserID(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlogsByUserID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlogService_DeleteBlogsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlogsByUserID'
type MockBlogService_DeleteBlogsByUserID_Call struct {
	*mock.Call
}

// DeleteBlogsByUserID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockBlogService_Expecter) DeleteBlogsByUserID(ctx interface{}, id interface{}) *MockBlogService_DeleteBlogsByUserID_Call {
	return &MockBlogService_DeleteBlogsByUserID_Call{Call: _e.mock.On("DeleteBlogsByUserID", ctx, id)}
}

func (_c *MockBlogService_DeleteBlogsByUserID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBlogService_DeleteBlogsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBlogService_DeleteBlogsByUserID_Call) Return(err error) *MockBlogService_DeleteBlogsByUserID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlogService_DeleteBlogsByUserID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockBlogService_DeleteBlogsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockBlogService
func (_mock *MockBlogService) Get(ctx context.Context, id uuid.UUID) (*model.Blog, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Blog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Blog, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Blog); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Blog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlogService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBlogService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockBlogService_Expecter) Get(ctx interface{}, id interface{}) *MockBlogService_Get_Call {
	return &MockBlogService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockBlogService_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBlogService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBlogService_Get_Call) Return(blog *model.Blog, err error) *MockBlogService_Get_Call {
	_c.Call.Return(blog, err)
	return _c
}

func (_c *MockBlogService_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*model.Blog, error)) *MockBlogService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockBlogService
func (_mock *MockBlogService) GetAll(ctx context.Context) ([]*model.Blog, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.Blog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*model.Blog, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*model.Blog); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Blog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlogService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockBlogService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
func (_e *MockBlogService_Expecter) GetAll(ctx interface{}) *MockBlogService_GetAll_Call {
	return &MockBlogService_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockBlogService_GetAll_Call) Run(run func(ctx context.Context)) *MockBlogService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBlogService_GetAll_Call) Return(blogs []*model.Blog, err error) *MockBlogService_GetAll_Call {
	_c.Call.Return(blogs, err)
	return _c
}

func (_c *MockBlogService_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]*model.Blog, error)) *MockBlogService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function for the type MockBlogService
func (_mock *MockBlogService) GetByUserID(ctx context.Context, id uuid.UUID) ([]*model.Blog, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*model.Blog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.Blog, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Blog); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Blog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlogService_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockBlogService_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockBlogService_Expecter) GetByUserID(ctx interface{}, id interface{}) *MockBlogService_GetByUserID_Call {
	return &MockBlogService_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, id)}
}

func (_c *MockBlogService_GetByUserID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBlogService_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBlogService_GetByUserID_Call) Return(blogs []*model.Blog, err error) *MockBlogService_GetByUserID_Call {
	_c.Call.Return(blogs, err)
	return _c
}

func (_c *MockBlogService_GetByUserID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) ([]*model.Blog, error)) *MockBlogService_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockBlogService
func (_mock *MockBlogService) Update(ctx context.Context, blog *model.Blog) error {
	ret := _mock.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Blog) error); ok {
		r0 = returnFunc(ctx, blog)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlogService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBlogService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - blog
func (_e *MockBlogService_Expecter) Update(ctx interface{}, blog interface{}) *MockBlogService_Update_Call {
	return &MockBlogService_Update_Call{Call: _e.mock.On("Update", ctx, blog)}
}

func (_c *MockBlogService_Update_Call) Run(run func(ctx context.Context, blog *model.Blog)) *MockBlogService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Blog))
	})
	return _c
}

func (_c *MockBlogService_Update_Call) Return(err error) *MockBlogService_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlogService_Update_Call) RunAndReturn(run func(ctx context.Context, blog *model.Blog) error) *MockBlogService_Update_Call {
	_c.Call.Return(run)
	return _c
}
